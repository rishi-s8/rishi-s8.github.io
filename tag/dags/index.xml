<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DAGs | Rishi Sharma</title>
    <link>https://rishi-s8.github.io/tag/dags/</link>
      <atom:link href="https://rishi-s8.github.io/tag/dags/index.xml" rel="self" type="application/rss+xml" />
    <description>DAGs</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 09 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://rishi-s8.github.io/img/rishi_cologne.jpg</url>
      <title>DAGs</title>
      <link>https://rishi-s8.github.io/tag/dags/</link>
    </image>
    
    <item>
      <title>Simplifying Differentiation using Directed Acyclic Graphs</title>
      <link>https://rishi-s8.github.io/post/differentiation-dag/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>https://rishi-s8.github.io/post/differentiation-dag/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Differentiation is easy, right? I always thought so. But then came complex derivatives in the form of Backpropagation and Backpropagation through Time. If you also think differentiation is easy, I urge you to try out deriving Backpropagation through Time before reading ahead.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this blog, I shall walk you through modelling mathematical functions as Directed Acyclic Graphs, and then finding their derivatives. This is something I learned as part of the course 
&lt;a href=&#34;https://www.i12.rwth-aachen.de/go/id/opmx/lidx/1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Computational Differentiation at RWTH Aachen University&lt;/a&gt;, taught by 
&lt;a href=&#34;https://www.stce.rwth-aachen.de/people/uwe-naumann&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prof. Uwe Naumann&lt;/a&gt;. This method made is extremely easy to derive Backpropagation algorithms in Deep Learning.&lt;/p&gt;
&lt;p&gt;Let us start by recalling the chain rule of differentiation once.&lt;/p&gt;
&lt;p&gt;$$y = \mathbf{f}(\mathbf{g}(x))$$
$$\frac{dy}{dx} = \frac{d\mathbf{f}(\mathbf{g})}{d\mathbf{g}} \cdot \frac{d\mathbf{g}(x)}{dx}$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, try deriving the following:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$$y = x \cdot e^{sin(x)}$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do Directed Acyclic Graphs come into the picture?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;Directed Acyclic Graph&lt;/strong&gt; can be used to graphically represent the computation of a mathematical function. Each &lt;em&gt;node&lt;/em&gt; of the graph represents an &lt;strong&gt;elementary computation&lt;/strong&gt;. &lt;em&gt;Edges&lt;/em&gt; represent the &lt;strong&gt;flow of computations&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We shall start by reducing the function given above into &lt;em&gt;elementary computations&lt;/em&gt; known as &lt;strong&gt;Single Assignment Code&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;single-assignment-code&#34;&gt;Single Assignment Code&lt;/h2&gt;
&lt;p&gt;A SAC of a mathematical function is a multi-step computation, where &lt;strong&gt;in each step, only one elementary computation&lt;/strong&gt; may be performed. A single application of &lt;em&gt;+, -, *, /, log, exp, sin, cos&lt;/em&gt; etc. may be termed as an elementary computation.&lt;/p&gt;
&lt;p&gt;For example,
$$y = x \cdot e^{sin(x)}$$&lt;/p&gt;
&lt;p&gt;The Single Assignment Code for this function:
$$v_1 = sin(x)$$
$$v_2 = e^{v_1}$$
$$y = x \cdot v_2$$&lt;/p&gt;
&lt;p&gt;Drawing a DAG is pretty simple once we have the SAC for the function. Each assignment in the SAC is a node in the DAG. The edges shall be directed from the inputs to the outputs for each assignment.&lt;/p&gt;















&lt;figure id=&#34;figure-the-directed-acyclic-graph-generated-from-the-single-assignment-code-for-the-function-yxexpsinx&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./sac.png&#34; data-caption=&#34;The Directed Acyclic Graph generated from the Single Assignment Code for the function y=x*exp(sin(x)).&#34;&gt;


  &lt;img src=&#34;./sac.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Directed Acyclic Graph generated from the Single Assignment Code for the function y=x*exp(sin(x)).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;p&gt;As one can notice from the graph, the whole computation is embedded in the graph itself. This means we can compute the result of the function for a certain value of input from the DAG without actually looking at the mathematical form of the function. This DAG is also know as the &lt;strong&gt;Computational Graph&lt;/strong&gt; of the given function.&lt;/p&gt;
&lt;h2 id=&#34;enter-derivatives&#34;&gt;Enter Derivatives!&lt;/h2&gt;
&lt;p&gt;Since we have the computational graph of the function, we just need a slight tweak to the graph to help us get the derivative. &lt;strong&gt;Label each edge with the partial derivative of the output node for that edge with respect to the input node for the edge&lt;/strong&gt;. Notice the word &lt;strong&gt;PARTIAL&lt;/strong&gt;. Since each node is an elementary computation, there is no chain rule involved in computing this derivative.&lt;/p&gt;















&lt;figure id=&#34;figure-the-directed-acyclic-graph-with-edges-labelled-with-derivatives-for-the-function-yxexpsinx&#34;&gt;


  &lt;a data-fancybox=&#34;&#34; href=&#34;./final-dag.png&#34; data-caption=&#34;The Directed Acyclic Graph with edges labelled with derivatives for the function y=x*exp(sin(x)).&#34;&gt;


  &lt;img src=&#34;./final-dag.png&#34; alt=&#34;&#34;  &gt;
&lt;/a&gt;


  
  
  &lt;figcaption&gt;
    The Directed Acyclic Graph with edges labelled with derivatives for the function y=x*exp(sin(x)).
  &lt;/figcaption&gt;


&lt;/figure&gt;

&lt;h2 id=&#34;derivative-of-the-function-from-the-computational-graph&#34;&gt;Derivative of the function from the Computational Graph&lt;/h2&gt;
&lt;p&gt;Assume we have two nodes &lt;em&gt;i&lt;/em&gt; and &lt;em&gt;j&lt;/em&gt; in the graph, and there exists a path from &lt;em&gt;i&lt;/em&gt; to &lt;em&gt;j&lt;/em&gt;. To compute the derivative of &lt;em&gt;j&lt;/em&gt; with respect to &lt;em&gt;i&lt;/em&gt;, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Traverse each path &lt;em&gt;k&lt;/em&gt; from node &lt;em&gt;i&lt;/em&gt; to node &lt;em&gt;j&lt;/em&gt; in the computational graph and compute the product of the value on each edge on the path. Call it p&lt;sub&gt;k&lt;/sub&gt;.&lt;/li&gt;
&lt;li&gt;Compute the sum of the values of p&lt;sub&gt;k&lt;/sub&gt; for all such paths from &lt;em&gt;i&lt;/em&gt; to &lt;em&gt;j&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For our example, we need to compute the derivative of &lt;em&gt;y&lt;/em&gt; with respect to &lt;em&gt;x&lt;/em&gt;.
Traversing the path on the top in the graph,
$$p_1 = \frac{\partial y}{\partial x} = v_2$$&lt;/p&gt;
&lt;p&gt;Traversing the path at the lower end,
$$p_2 = \frac{\partial v_1}{\partial x} \cdot \frac{\partial v_2}{\partial v_1} \cdot \frac{\partial y}{\partial v_2} = cos(x) \cdot e^{v_1} \cdot x$$&lt;/p&gt;
&lt;p&gt;So, the required derivative becomes
$$\frac{\partial y}{\partial x} = p_1 + p_2$$
$$\frac{\partial y}{\partial x} = (v_2) + (cos(x) \cdot e^{v_1} \cdot x)$$
$$\frac{\partial y}{\partial x} = (v_2) + (cos(x) \cdot e^{v_1} \cdot x)$$
Substituting the values from the SAC,
$$\frac{\partial y}{\partial x} = (e^{v_1}) + (cos(x) \cdot e^{sin(x)} \cdot x)$$
$$\frac{\partial y}{\partial x} = (e^{sin(x)}) + (cos(x) \cdot e^{sin(x)} \cdot x)$$.&lt;/p&gt;
&lt;p&gt;Simple right? Isn&amp;rsquo;t it the same thing you get when applying chain rule directly? In fact, whatever we did in the form of Single Assignment Code, Computational Graph and then summing the product of each path was basically the chain rule. I&amp;rsquo;d leave it to you to think why this actually works. I&amp;rsquo;d be happy to discuss this personally.&lt;/p&gt;
&lt;p&gt;Answer this. &lt;strong&gt;What would happen if there is no path from input to output?&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We saw how to model computations in the form of computational graphs and compute derivative of any differentiable function. Now, you must be thinking why go through all this when you could directly apply Chain-rule and get the answer? The simple answer is do what is easier. For simple functions, directly applying chain-rule is easier. For, more complex, multi-dimensional functions, Computational Graphs make life super-simple. With a little practice, you can directly jump to drawing the DAG without explicitly using the &lt;strong&gt;Single Assignment Code&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Take some complicated functions and try finding the derivatives using the computational graph.&lt;/p&gt;
&lt;p&gt;Finally, there are some problems where you are directly given the Computational Graph and you need to find the derivative. The best examples are Multi-layer Perceptrons and Recurrent Neural Networks. It is quite tedious to derive the backpropagation algorithms for these. Now, using the computational graph (in this case, the architecture diagram itself), we can easily derive the backpropagation algorithm. I urge you to try it out. I&amp;rsquo;ll discuss these in a later tutorial.&lt;/p&gt;
&lt;p&gt;Thank you for reading. :)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
